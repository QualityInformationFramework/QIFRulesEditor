///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia and QIF Rules Editor contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Re.Wpf
{
    /// <summary> Represents a file format. </summary>
    public struct Format
    {
        /// <summary> Constructor. </summary>
        /// <param name="extension"> Extension associated with the format (normally without dot). </param>
        /// <param name="description"> Format description </param>
        public Format(string extension, string description)
        {
            Extension = extension;
            Description = description;
        }

        /// <summary> Checks a file with the specified path has this extension. </summary>
        /// <param name="path"> File to check </param>
        /// <returns> True if the specified file has this extension, otherwise false </returns>
        public bool Check(string path)
        {
            var ext = Path.GetExtension(path).Substring(1).ToLower();
            return ext == Extension;
        }

        /// <summary> Gets or sets extension associated with the format (normally without dot). </summary>
        public string Extension { get; set; }

        /// <summary> Gets or sets format description. </summary>
        public string Description { get; set; }
    }

    /// <summary> Set of known formats. </summary>
    static class Formats
    {
        public static Format Qif { get; } = new Format("qif", "QIF Document");
        public static Format Rml { get; } = new Format("rules", "Rules Markup Language");
    }
}
