///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia and QIF Rules Editor contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

using System;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Re.Test
{
    [TestClass]
    public class TestDocumentToLanguage
    {
        [DataTestMethod]
        [DataRow(@"qif_rules\DMERules1.QIF")]
        [DataRow(@"qif_rules\DMERules2.QIF")]
        [DataRow(@"qif_rules\DMERules3.QIF")]
        [DataRow(@"qif_rules\DMERules4.QIF")]
        [DataRow(@"qif_rules\DMERules5.QIF")]
        [DataRow(@"qif_rules\docRules.QIF")]
        [DataRow(@"qif_rules\featureRules1.QIF")]
        [DataRow(@"qif_rules\featureRules2.QIF")]
        [DataRow(@"qif_rules\featureRules3.QIF")]
        [DataRow(@"qif_rules\featureRules4.QIF")]
        public void Test(string file)
        {
            var context = Context.CreateForFile("TestDocumentToLanguage", file);

            // TODO QifRules' -> QIF'
            // TODO validate QIF'
            //
            // Workflow:
            //   QIF -> Document -> QIFRules -> Language -> AST -> QIFRules'
            //
            // Input:
            //   QIF
            //
            // Output:
            //   QIF
            //   Language
            //   AST
            //   QIFRules'
            //
            // Exam:
            //   Language
            //   AST
            //   QIFRules'
            //
            // Analysis:
            //   QIF <=> QIFRules'

            // open QIF document
            var doc = Re.Document.Qif.CreateFromFile(file);
            var qifDump = context.GenDumpName("qif");
            doc.Write(qifDump);

            // prepare Rules QIF classes
            var qifRules = Re.Rules.Qif.CreateFromDocument(doc);

            // convert to language
            var language = Re.Rules.Language.CreateFromQifRules(qifRules);
            var langDump = context.GenDumpName("lang");
            File.WriteAllText(langDump, language.Text);

            // parse language to AST
            var ast = new Re.Rules.Ast(language);
            var astDump = context.GenDumpName("ast");
            File.WriteAllText(astDump, ast.ToDebugText());

            // convert AST to Rules QIF classes
            var qifRules2 = Re.Rules.Qif.CreateFromAst(ast);

            // recreate Rule in QIF document by Rules QIF classes
            doc.ResetRules(qifRules2);
            var qifDump2 = context.GenDumpName("qif2");
            doc.Write(qifDump2);

            // exam
            context.ExamFile("lang", langDump);
            context.ExamFile("ast", astDump);
            context.ExamFile("qif", qifDump2);
        }
    }
}
