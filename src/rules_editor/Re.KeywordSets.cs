///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

using Re.Grammar;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Re
{
    static class KeywordSets
    {
        public static int[] BooleanFunctions { get; } = new int[]
        {
            rulesLexer.CHARACTERISTIC_IS_KEYWORD,
            rulesLexer.FEATURE_TYPE_IS_KEYWORD,
            rulesLexer.FEATURE_IS_DATUM_KEYWORD,
            rulesLexer.FEATURE_IS_INTERNAL_KEYWORD,
            rulesLexer.SAMPLING_CATEGORY_IS_KEYWORD,
            rulesLexer.SHAPE_CLASS_IS_KEYWORD
        };

        public static int[] ArithmeticFunctions { get; } = new int[]
        {
            rulesLexer.VARIABLE_KEYWORD,
            rulesLexer.FEATURE_PARAMETER_KEYWORD,
            rulesLexer.CHARACTERISTIC_PARAMETER_KEYWORD,
            rulesLexer.DME_PARAMETER_KEYWORD,
            rulesLexer.PART_PARAMETER_KEYWORD,
            rulesLexer.FEATURE_LENGTH_KEYWORD,
            rulesLexer.FEATURE_AREA_KEYWORD,
            rulesLexer.FEATURE_SIZE_KEYWORD,
            rulesLexer.MAX_KEYWORD,
            rulesLexer.MIN_KEYWORD,
            rulesLexer.CHARACTERISTIC_TOLERANCE_KEYWORD,
            rulesLexer.OBJECT_PARAMETER_KEYWORD
        };

        public static int[] ThenBlocks { get; } = new int[]
        {
            rulesLexer.DME_THEN_DECISION_CLASS_KEYWORD,
            rulesLexer.DME_THEN_ID_KEYWORD,
            rulesLexer.DME_THEN_MAKE_MODEL_KEYWORD
        };

        public static int[] BooleanOperators { get; } = new int[]
        {
            rulesLexer.AND_KEYWORD,
            rulesParser.OR_KEYWORD
        };
    }
}
