///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Serialization;

namespace Re.Rules
{
    public class Qif
    {
        public static Qif CreateFromAst(Re.Rules.Ast ast)
        {
            return new Qif() { m_rules = ast.ToQifRules() };
        }

        public static Qif CreateFromDocument(Re.Document.Qif doc)
        {
            // doc -> rules node -> deserialize to Rules classes
            var xr = new XmlNodeReader(doc.Rules);
            var xs = new XmlSerializer(typeof(Re.Qif3.QIFRulesType));
            var rules = xs.Deserialize(xr) as Re.Qif3.QIFRulesType;
            return new Qif() { m_rules = rules };
        }

        public void WriteToXml(string fileName)
        {
            using (var sw = new StreamWriter(fileName))
            {
                var xs = new XmlSerializer(typeof(Qif3.QIFRulesType));
                xs.Serialize(sw, m_rules);
            }
        }

        public void Serialize(XmlWriter xw)
        {
            var xs = new XmlSerializer(typeof(Qif3.QIFRulesType));
            xs.Serialize(xw, m_rules);
        }

        public string ToLanguageText()
        {
            var visitor = new QifVisitorLanguage();
            return visitor.Accept(m_rules);
        }

        private Re.Qif3.QIFRulesType m_rules;
    }
}
