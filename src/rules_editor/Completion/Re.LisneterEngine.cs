///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia and QIF Rules Editor contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

using Antlr4.Runtime;
using Re.Grammar;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Re.Completion
{
    /// <summary> Completion engine that uses listener based completion algorithm. </summary>
    /// <seealso cref="Re.Completion.IAntlrEngine" />
    class ListenerEngine : IAntlrEngine
    {
        /// <summary> Gets recognized tokens. </summary>
        public IReadOnlyList<IToken> Tokens => mTokens ?? mEmptyTokens;

        /// <summary> Finds continuations for the specified text. </summary>
        /// <param name="input"> Text </param>
        /// <returns> Found suggestions </returns>
        public IEnumerable<string> Suggest(string input)
        {
            try
            {
                // run algorithm and find suggestions
                var lexer = new rulesLexer(new AntlrInputStream(input));
                var tokens = lexer.GetAllTokens();
                var parser = new rulesParser(new CommonTokenStream(new ListTokenSource(tokens)));
                var completion = new CompletionListener(tokens);
                parser.AddParseListener(completion);
                parser.dme_rules();
                mTokens = new List<IToken>(tokens);

                // suggestions are in single quotes now
                // remove them
                var result = new List<string>();
                foreach (var s in completion.Suggestions)
                    result.Add(s.StartsWith("\'") ? s.Substring(1, s.Length - 2) : s);

                return result;
            }
            catch
            {
                // TODO: log exception
                return Enumerable.Empty<string>();
            }
        }

        private List<IToken> mTokens;
        private readonly List<IToken> mEmptyTokens = new List<IToken>();
    }
}
